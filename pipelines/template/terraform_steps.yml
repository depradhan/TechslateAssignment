parameters:
  - name: ringName
    type: string
  - name: tf_path
    type: string
    default: '$(build.sourcesdirectory)'
  - name: Azure_Service_ConnectionName
    type: string
    default: 'InfaCode'
  - name: Azure_ResourceGroupName
    type: string
    default: 'InsightApp'
  - name: Azure_StorageAccountName
    type: string
    default: 'demostatefiles1'
  - name: Azure_ContainerName
    type: string
    default: 'techslate'

steps:
  - task: TerraformInstaller@1
    displayName: 'Install Terraform Tool'
    inputs:
      terraformVersion: 'latest'

  - task: TerraformTaskV4@4
    displayName: Terraform init
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '${{parameters.tf_path}}/terraform'
      backendServiceArm: '${{parameters.Azure_Service_ConnectionName}}'
      backendAzureRmResourceGroupName: '${{parameters.Azure_ResourceGroupName}}'
      backendAzureRmStorageAccountName: '${{parameters.Azure_StorageAccountName}}'
      backendAzureRmContainerName: '${{parameters.Azure_ContainerName}}'
      backendAzureRmKey: 'terraform.tfstate'

  - task: TerraformTaskV4@4
    displayName: Terraform plan
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '${{parameters.tf_path}}/terraform'
      commandOptions: '-var-file="./variables/dev.tfvars"'
      environmentServiceNameAzureRM: '${{parameters.Azure_Service_ConnectionName}}'

  - task: TerraformTaskV4@4
    displayName: Terraform apply
    condition: ne(variables['System.StageName'], 'build')  # Skip if the stage name is 'build'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '${{parameters.tf_path}}/terraform'
      commandOptions: '-var-file="./variables/dev.tfvars" -auto-approve'
      environmentServiceNameAzureRM: '${{parameters.Azure_Service_ConnectionName}}'
